// <auto-generated />
using System;
using JoinTheWrite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JoinTheWrite.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250421213928_autherIdforeignkey")]
    partial class autherIdforeignkey
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JoinTheWrite.Models.Chapter", b =>
                {
                    b.Property<Guid>("ChapterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterNumber")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FinalizedContributionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VotingDeadline")
                        .HasColumnType("datetime2");

                    b.HasKey("ChapterId");

                    b.HasIndex("CreationId");

                    b.HasIndex("FinalizedContributionId");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Comment", b =>
                {
                    b.Property<Guid>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CommentId");

                    b.HasIndex("CreationId");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Contribution", b =>
                {
                    b.Property<Guid>("ContributionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChapterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ContributionId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("CreationId");

                    b.ToTable("Contributions");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Creation", b =>
                {
                    b.Property<Guid>("CreationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChapterCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxChapters")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VotingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("VotingStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CreationId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Creations");
                });

            modelBuilder.Entity("JoinTheWrite.Models.User", b =>
                {
                    b.Property<Guid>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Vote", b =>
                {
                    b.Property<Guid>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContributionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsUpvote")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VoteId");

                    b.HasIndex("ContributionId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Chapter", b =>
                {
                    b.HasOne("JoinTheWrite.Models.Creation", "Creation")
                        .WithMany("Chapters")
                        .HasForeignKey("CreationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoinTheWrite.Models.Contribution", "FinalizedContribution")
                        .WithMany()
                        .HasForeignKey("FinalizedContributionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Creation");

                    b.Navigation("FinalizedContribution");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Comment", b =>
                {
                    b.HasOne("JoinTheWrite.Models.Creation", "Creation")
                        .WithMany("Comments")
                        .HasForeignKey("CreationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoinTheWrite.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("JoinTheWrite.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creation");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Contribution", b =>
                {
                    b.HasOne("JoinTheWrite.Models.User", "Author")
                        .WithMany("Contributions")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoinTheWrite.Models.Chapter", "Chapter")
                        .WithMany("Contributions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoinTheWrite.Models.Creation", null)
                        .WithMany("Contributions")
                        .HasForeignKey("CreationId");

                    b.Navigation("Author");

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Creation", b =>
                {
                    b.HasOne("JoinTheWrite.Models.User", "Author")
                        .WithMany("Creations")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Vote", b =>
                {
                    b.HasOne("JoinTheWrite.Models.Contribution", "Contribution")
                        .WithMany("Votes")
                        .HasForeignKey("ContributionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JoinTheWrite.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contribution");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Chapter", b =>
                {
                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Contribution", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("JoinTheWrite.Models.Creation", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("Comments");

                    b.Navigation("Contributions");
                });

            modelBuilder.Entity("JoinTheWrite.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Contributions");

                    b.Navigation("Creations");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
